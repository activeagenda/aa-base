<?php
/**
 * Template file for generated files (alt. a generated file)
 *
 * PHP version 5
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2009 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under another license, the
 * contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.5, or subsequent versions as allowed by the RPL, and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the RPL is provided strictly on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND LICENSOR HEREBY
 * DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT, OR
 * NON-INFRINGEMENT. See the RPL for specific language governing rights and
 * limitations under the RPL.
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2009 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.5
 * @version        SVN: $Revision: 1627 $
 * @last-modified  SVN: $Date: 2009-05-11 22:22:15 +0200 (Pn, 11 maj 2009) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:5:{s:8:"PersonID";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:106:"Person ID|The Person ID of the associated person (users must have a matching record in the People module).";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:8:"PersonID";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:6:"Person";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:35:"Person|The person who is this user.";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:6:"Person";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:8:"Username";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:31:"Username|The user\'s login name.";s:8:"dataType";s:11:"varchar(25)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:8:"Username";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:19:"DefaultOrganization";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:184:"Default Organization|This field affects user data entry experience by defaulting designated organization fields throughout the application to the name of the organization selected here";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:19:"DefaultOrganization";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:7:"IsAdmin";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:114:"Is Site Administrator|Site Administrators have access to all records in all modules, plus administration features.";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:7:"IsAdmin";s:10:"needsReGet";b:0;s:11:"formatField";N;}}');

$hasEditableFields = false;


$skipSaveFields = unserialize('a:5:{i:0;s:8:"PersonID";i:1;s:6:"Person";i:2;s:8:"Username";i:3;s:19:"DefaultOrganization";i:4;s:7:"IsAdmin";}');


$singularRecordName = gettext("User");

//field value array
$data = array(
'PersonID' => '',
         'Person' => '',
         'Username' => '',
         'DefaultOrganization' => '',
         'IsAdmin' => ''
);

if(empty($_POST)){
    //pre-populate fields with URL values
    if(0 === $recordID){
        foreach($data as $fieldName=>$value){
            if(isset($_GET[$fieldName])){
                $data[$fieldName] = $_GET[$fieldName];
            }
        }
    }
} else {
    foreach($data as $fieldName=>$value){
        if(isset($_POST[$fieldName])){
            $data[$fieldName] = $_POST[$fieldName];
        }
    }
}

//list of grids
   $grids = array();
   $grids[1] = unserialize('O:10:"SelectGrid":53:{s:16:"availableIDField";s:14:"OrganizationID";s:18:"availableNameField";s:4:"Name";s:16:"listAvailableSQL";s:118:"SELECT `org`.OrganizationID AS ID, `org`.Name AS Name FROM `org` WHERE
org._Deleted = 0 AND ((`org`.Participant = 1))
";s:14:"listConditions";a:0:{}s:15:"listSelectedSQL";s:233:"SELECT `usrpo`.OrganizationID AS ID, `org1`.Name AS Name  FROM usrpo  LEFT OUTER JOIN `org` AS org1 
   ON (`usrpo`.OrganizationID = `org1`.OrganizationID )
 WHERE  usrpo.PersonID = \'/*recordID*/\' AND usrpo._Deleted = 0 ORDER BY Name";s:23:"listExistingSelectedSQL";s:212:"SELECT `usrpo`.OrganizationID AS ID, `org1`.Name AS Name , usrpo._Deleted FROM usrpo  LEFT OUTER JOIN `org` AS org1 
   ON (`usrpo`.OrganizationID = `org1`.OrganizationID )
 WHERE  usrpo.PersonID = \'/*recordID*/\'";s:9:"insertSQL";s:119:"INSERT INTO usrpo (OrganizationID, PersonID, _ModBy, _ModDate) VALUES (\'/*value*/\', \'/*recordID*/\', /*userID*/, NOW());";s:15:"insertRemoteSQL";N;s:9:"removeSQL";s:197:"UPDATE usrpo SET 
            _Deleted = 1,
            _ModBy = \'/*userID*/\', 
            _ModDate = NOW()
        WHERE PermitOrganizationID = \'/*rowID*/\' AND usrpo.PersonID = \'/*recordID*/\'";s:15:"removeRemoteSQL";N;s:10:"restoreSQL";s:197:"UPDATE usrpo SET 
            _Deleted = 0,
            _ModBy = \'/*userID*/\', 
            _ModDate = NOW()
        WHERE PermitOrganizationID = \'/*rowID*/\' AND usrpo.PersonID = \'/*recordID*/\'";s:16:"restoreRemoteSQL";N;s:14:"getRemoteIDSQL";s:118:"SELECT PermitOrganizationID AS RowID FROM usrpo WHERE OrganizationID = \'/*value*/\' AND usrpo.PersonID = \'/*recordID*/\'";s:17:"getRemoteRowIDSQL";N;s:6:"logSQL";s:146:"INSERT INTO usrpo_l (OrganizationID, PersonID, _ModBy, _ModDate, _Deleted) VALUES (\'/*value*/\', \'/*recordID*/\', \'/*userID*/\', NOW(), /*deleted*/);";s:12:"logRemoteSQL";N;s:14:"useRemoteField";b:0;s:11:"listKeyType";s:0:"";s:10:"getFormSQL";s:0:"";s:9:"getRowSQL";s:0:"";s:12:"remoteFields";N;s:11:"hasGridForm";b:0;s:10:"FormFields";a:0:{}s:10:"selectedID";N;s:7:"encType";s:0:"";s:16:"IDTranslationSQL";s:0:"";s:20:"listExtendedConditon";s:0:"";s:7:"PKField";N;s:19:"showGlobalSMRecords";b:0;s:13:"orderByFields";a:0:{}s:18:"dataCollectionForm";b:0;s:15:"parentGetFields";a:0:{}s:20:"parentSelectSQLOnNew";N;s:15:"getFormSQLOnNew";N;s:17:"getRowSQLOnDelete";N;s:14:"allowAddRecord";b:1;s:8:"moduleID";s:5:"usrpo";s:6:"phrase";s:23:"Permitted Organizations";s:6:"number";i:1;s:6:"Fields";a:0:{}s:8:"countSQL";N;s:7:"listSQL";N;s:12:"listExtended";b:0;s:8:"localKey";s:8:"PersonID";s:9:"parentKey";N;s:8:"PKFields";N;s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:0:{}s:12:"fieldFormats";a:0:{}s:4:"name";N;s:16:"primaryListField";s:12:"Organization";s:10:"conditions";a:1:{s:8:"PersonID";s:12:"/*recordID*/";}s:12:"listModuleID";s:3:"org";}');


/**guidanceGrid**/

$PKField = 'PersonID';

$ownerField = 'OrganizationID';


/**disbleGlobalModules**/

//handle any posted grid form
   $grids[1]->handleForm();


$tabsQSargs = $qsArgs;
unset($tabsQSargs['scr']);
unset($tabsQSargs['gid']);
unset($tabsQSargs['grw']);
$tabsQS = MakeQS($tabsQSargs);
$nextScreen = "Groups";
$nextlink = "edit.php?$tabsQS&scr=$nextScreen";
$form_enctype = '';

/**CUSTOM_CODE|init**/

$getSQL = "SELECT 
   `usr`.PersonID AS PersonID,
   `ppl1`.DisplayName AS Person,
   `usr`.Username AS Username,
   `org1`.Name AS DefaultOrganization,
   `usr`.IsAdmin AS IsAdmin,
   NULLIF(CONCAT(IFNULL( CAST( `ppl1`.DisplayName AS CHAR ),''),' | ',IFNULL( CAST( `org2`.Name AS CHAR ),''),' | Domy','ślnie: ',IFNULL( CAST( `org1`.Name AS CHAR ),''),' | ',IFNULL( CAST( `cod1`.Description AS CHAR ),'')),' |  | Domyślnie:  | ') AS RecordLabel,
   `ppl1`.OrganizationID AS OrganizationID
FROM `usr`
   LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`usr`.PersonID = `ppl1`.PersonID )
   LEFT OUTER JOIN `org` AS org1 
   ON (`usr`.DefaultOrganizationID = `org1`.OrganizationID )
   LEFT OUTER JOIN `cod` AS cod1 
   ON (`usr`.LangID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '138')
   LEFT OUTER JOIN `org` AS org2 
   ON (`ppl1`.OrganizationID = `org2`.OrganizationID )
WHERE usr._Deleted = 0
   AND `usr`.PersonID = '/**RecordID**/'
";

$getSQL = TranslateLocalDateSQLFormats($getSQL);

if(!empty($_POST['CloneForm'])){
    $recordID = 0;
}


$screenPhrase = gettext("Permitted Organizations|Edit the assigned organizations");

/*populates screen messages differently depending on whether the record exists in db or not*/
if($recordID != 0) {
    $existing = true;

    $pageTitle = gettext("User");

    /**CUSTOM_CODE|before_get**/

    //retrieve record
    /**SQL|GET_BEGIN**/
    $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
    dbErrorCheck($r);
    /**SQL|GET_END**/

    switch (count($r)){
    case 0:
        trigger_error(gettext("This record does not exist, or could not be found.|Record not found."), E_USER_ERROR);
        break;
    case 1:
        break;
    default:
        trigger_error(gettext("More than one record was found."), E_USER_WARNING);
        break;
    }

    //populate data array, combining POSTed data with DB record:
    //POST data takes precedence
    foreach($r[0] as $fieldName=>$dbValue){
        //(checking for gridnum avoids interference with any posted edit grid)
        if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
            $data[$fieldName] = $_POST[$fieldName];
        } else {
            $data[$fieldName] = $dbValue;
        }
    }


    /**CUSTOM_CODE|get**/
} else {
    //inserting a record
    $existing = false;
    $pageTitle = gettext("Users");
    /**CUSTOM_CODE|new**/
}

//check if user has permission to edit record
$allowEdit = $User->CheckEditScreenPermission();
//if not, it terminates and display error msg.

//phrases for field names, in field order
$phrases = array(
   'PersonID' => gettext("Person ID|The Person ID of the associated person (users must have a matching record in the People module)."),
   'Person' => gettext("Person|The person who is this user."),
   'Username' => gettext("Username|The user's login name."),
   'DefaultOrganization' => gettext("Default Organization|This field affects user data entry experience by defaulting designated organization fields throughout the application to the name of the organization selected here"),
   'IsAdmin' => gettext("Is Site Administrator|Site Administrators have access to all records in all modules, plus administration features.")
   );


//if the form was posted by clicking the Save button
if(!empty($_POST['Save'])){
    

    if(empty($_POST['KeepNew'])){
        if(count($messages) == 0){
            /**-remove_begin-**/
            //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
            $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
            dbErrorCheck($r);
            if(count($r) > 0) {
                foreach($r[0] as $fieldName=>$dbValue){
                    //(checking for gridnum avoids interference with any posted edit grid)
                    if(empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                        $data[$fieldName] = $_POST[$fieldName];
                    } else {
                        $data[$fieldName] = $dbValue;
                    }
                }
            } else {
                $messages[] = array('e', gettext("Error: Empty query result."));
            }
            /**-remove_end-**/
        }
    } else {
        foreach($data as $fieldName => $fieldValue){
            $data[$fieldName] = '';
        }
    }

    //note: assumes all messages up til this point were errors
    if (count($messages) == 0){
        //add success message
        if ($inserted){
            $messages[] = array('m', gettext("The record was added successfully."));
        } else {
            $messages[] = array('m', gettext("The record was updated successfully."));
        }
    }
}
/**SQL|DELETE_BEGIN**/
if(!empty($_POST['Delete'])){

    $dh = GetDataHandler($ModuleID);
    $result = $dh->deleteRow($recordID);

    $deletelink = "list.php?$tabsQS";

    //redirect to list screen
    header("Location:" . $deletelink);
    exit;
}
/**SQL|DELETE_END**/

/**CUSTOM_CODE|after_save**/


if(!empty($_POST['KeepNew'])){
    unset($qsArgs['rid']); //ensures next submit will cause a new record
}

$qs = MakeQS($qsArgs);

//List tab
$tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Users"));

//target for FORMs
$targetlink = "edit.php?$qs";

$cloneAsNew = false;
$keepAddNew = false;

//formatting that depends on whether the record exists or not
if($existing){
    //delete button only appears on the first EditScreen.
    $deletelink = '';
    $cancellink = "view.php?$tabsQS";

    $cloneAsNew = true;

          $tabs['View'] = array( "view.php?scr=View&amp;$tabsQS", gettext("View|View summary information about").' '.gettext("a User") );
      $tabs['Form'] = array( "edit.php?scr=Form&amp;$tabsQS", gettext("Credentials|Edit a user's user name and password") );
      $tabs['Settings'] = array( "edit.php?scr=Settings&amp;$tabsQS", gettext("Settings|Edit a user's settings") );
      $tabs['Permissions'] = array( "edit.php?scr=Permissions&amp;$tabsQS", gettext("Permissions|Edit permissions to view or edit records of a module") );
      $tabs['PermittedOrgs'] = array( "", gettext("Permitted Organizations|Edit the assigned organizations") );
      $tabs['Groups'] = array( "edit.php?scr=Groups&amp;$tabsQS", gettext("Group Membership|Define which groups this user should be a memebr of") );


} else {
    $deletelink = '';
    $cancellink = "list.php?$tabsQS";

    $keepAddNew = true;

          $tabs['PermittedOrgs'] = array( "", gettext("New User") );

}

/**CUSTOM_CODE|form**/

$content = '';
foreach($fields as $key => $field){
    if (!$field->isSubField()){
        $content .= $field->render($data, $phrases);
    }
}

$formProps = array(
    /**is_main_form**/
    'delete_button'      => strlen($deletelink) > 0,
    'cancel_link'        => $cancellink,
    'next_screen'        => $nextScreen,
    'form_enctype'       => $form_enctype,
    'module_id'          => $ModuleID,
    'render_buttons'     => $hasEditableFields,
    'clone'              => $cloneAsNew,
    'keep_add_new'       => $keepAddNew,
    'single_record_name' => $singularRecordName
);

$content = renderForm2($content, $targetlink, $formProps);

//insert code to enable calendar controls
/**dateFields**/

/**CUSTOM_CODE|after_form**/

//display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


/**CUSTOM_CODE|after_grids**/

   $recordLabelField = '';
    if(isset($data['RecordLabel'])) {
    $recordLabelField = $data['RecordLabel'];
    }
?>