<?php
/**
 * Template file for generated files (alt. a generated file)
 *
 * PHP version 5
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2009 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under another license, the
 * contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.5, or subsequent versions as allowed by the RPL, and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the RPL is provided strictly on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND LICENSOR HEREBY
 * DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT, OR
 * NON-INFRINGEMENT. See the RPL for specific language governing rights and
 * limitations under the RPL.
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2009 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.5
 * @version        SVN: $Revision: 1627 $
 * @last-modified  SVN: $Date: 2009-05-11 22:22:15 +0200 (Pn, 11 maj 2009) $
 */

    /**CUSTOM_CODE|init**/

    //list of objects containing the field information
    $fields = unserialize('a:4:{s:13:"TransactionID";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:79:"Transaction ID|An automatically assigned ID for internal purposes (primary key)";s:8:"dataType";s:6:"bigint";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:13:"TransactionID";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:15:"TransactionDate";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:64:"Transaction Date|The date and time when the transaction occurred";s:8:"dataType";s:8:"datetime";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:15:"TransactionDate";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:4:"User";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:46:"Person|The user who committed the transaction.";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:4:"User";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:8:"_ModDate";O:14:"InvisibleField":15:{s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";N;s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";N;s:17:"inlinePostContent";N;s:4:"name";s:8:"_ModDate";}}');


    //list of grids
    /**grids**/

    //phrases for field names, in field order
    $phrases = array(
   'TransactionID' => gettext("Transaction ID|An automatically assigned ID for internal purposes (primary key)"),
   'TransactionDate' => gettext("Transaction Date|The date and time when the transaction occurred"),
   'User' => gettext("Person|The user who committed the transaction."),
   '_ModDate' => gettext("Modified On")
   );


    $ownerField = '';


    /**disbleGlobalModules**/
    /**useBestPractices**/

    //retrieve record
    $data = array();

    /**SQL|GET_BEGIN**/
    $SQL = "SELECT 
   `trx`.TransactionID AS TransactionID,
   DATE_FORMAT(`trx`.TransactionDate, GET_FORMAT(DATETIME,/*localDateTime*/'ISO')) AS TransactionDate,
   `ppl1`.DisplayName AS User,
   DATE_FORMAT(`trx`._ModDate, GET_FORMAT(DATETIME,/*localDateTime*/'ISO')) AS _ModDate
FROM `trx`
   LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`trx`.UserID = `ppl1`.PersonID )
WHERE trx._Deleted = 0
   AND `trx`.TransactionID = '/**RecordID**/'
";

    $SQL = TranslateLocalDateSQLFormats($SQL);

    /**CUSTOM_CODE|before_get**/

    //get data
    $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $SQL), DB_FETCHMODE_ASSOC);
    dbErrorCheck($r);

    /**SQL|GET_END**/
    switch (count($r)){
    case 0:
        trigger_error("This record does not exist, or could not be found.|Record not found.", E_USER_ERROR);
        break;
    case 1:
        break;
    default:
        trigger_error("More than one record was found.", E_USER_WARNING);
        break;
    }

    $data = array_merge($data, $r[0]); //assign first (only) row

    /**CUSTOM_CODE|get**/

    //check if user has permission to view or edit record - will redirect if no permission at all
    $allowEdit = $User->CheckViewScreenPermission();
    //$allowEdit = true;

    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    $tabsQS = MakeQS($tabsQSargs);

    //List tab
    $tabs['List'] = Array("list.php?$qs", gettext("List|View the list of Transactions"));

    if ($allowEdit){
              $tabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("a Transaction") );

    } else {
              $tabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("a Transaction") );

    }

    $recordLabelField = 'Record ' . $recordID;

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $pageTitle = gettext("Transaction");
    $screenPhrase = gettext("View|View a transaction");

    $backlink = "list.php?$qs";

    $nextScreen = "";
    $editlink = "edit.php?$tabsQS&scr=$nextScreen";
    $content = renderViewTable($content, $allowEdit, $backlink, $editlink);

    //add byline info on record modification info
    $content .= "<div class=\"recinfo\">{$phrases['_ModDate']} {$data['_ModDate']}";
    if ($User->IsAdmin) {
        $content .= '&nbsp; &nbsp; <a href="audit.php?mdl='.$ModuleID.'&rid='.$recordID.'">'.gettext("Audit Trail").'</a> ';
    }
    $content .= "</div>";

    //display view grids here
   $Grid1 = unserialize('O:8:"ViewGrid":20:{s:13:"orderByFields";a:0:{}s:6:"isInfo";b:1;s:10:"isGuidance";b:0;s:10:"isVertical";b:0;s:15:"verticalFormats";a:0:{}s:8:"moduleID";s:4:"trxr";s:6:"phrase";s:19:"Transaction Records";s:6:"number";i:1;s:6:"Fields";a:6:{s:19:"TransactionRecordID";O:14:"InvisibleField":15:{s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:86:"Transaction Record ID|An automatically assigned ID for internal purposes (primary key)";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"trxr";s:9:"gridAlign";N;s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";N;s:17:"inlinePostContent";N;s:4:"name";s:19:"TransactionRecordID";}s:13:"RelatedModule";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:82:"Related Module|The name or title of the module which is associated with the record";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"trxr";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:13:"RelatedModule";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:15:"RelatedRecordID";O:9:"ViewField":21:{s:9:"linkField";s:17:"RelatedRecordLink";s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:79:"Related Record ID|The unique ID of the related record within the related module";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"trxr";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:15:"RelatedRecordID";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:24:"RelatedRecordDescription";O:9:"ViewField":21:{s:9:"linkField";s:17:"RelatedRecordLink";s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:133:"Record Description|A description of the related record based on a combination of field values assigned from within the related module";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"trxr";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:24:"RelatedRecordDescription";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:8:"Indirect";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:114:"Indirect|Whether this record was updated because of changes in a different module (by a remote field relationship)";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"trxr";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:8:"Indirect";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:12:"ActionTypeID";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:63:"Action Type ID|The type of action taken: Insert, Update, Delete";s:8:"dataType";s:7:"tinyint";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"trxr";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:12:"ActionTypeID";s:10:"needsReGet";b:0;s:11:"formatField";N;}}s:8:"countSQL";s:109:"SELECT 
    count(*) 
FROM `trxr`
   
WHERE trxr._Deleted = 0
   AND `trxr`.TransactionID = \'/**RecordID**/\'
";s:7:"listSQL";s:634:"SELECT 
   `trxr`.TransactionRecordID AS TransactionRecordID,
`mod1`.Name AS RelatedModule,
CONCAT(\'internal:view.php?mdl=\',`trxr`.RelatedModuleID,\'&rid=\',`trxr`.RelatedRecordID) AS RelatedRecordLink,
`trxr`.RelatedRecordID AS RelatedRecordID,
`rdc1`.Value AS RelatedRecordDescription,
`trxr`.Indirect AS Indirect,
`trxr`.ActionTypeID AS ActionTypeID
FROM `trxr`
LEFT OUTER JOIN `mod` AS mod1 
   ON (`trxr`.RelatedModuleID = `mod1`.ModuleID )
   LEFT OUTER JOIN `rdc` AS rdc1 ON (`trxr`.RelatedModuleID = rdc1.ModuleID AND `trxr`.RelatedRecordID =  rdc1.RecordID)
WHERE trxr._Deleted = 0
AND `trxr`.TransactionID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:8:"localKey";s:13:"TransactionID";s:9:"parentKey";N;s:8:"PKFields";N;s:13:"formatOptions";a:2:{s:9:"infoTitle";b:1;s:19:"suppressRecordIcons";b:1;}s:10:"fieldTypes";a:6:{s:19:"TransactionRecordID";s:6:"bigint";s:13:"RelatedModule";N;s:15:"RelatedRecordID";s:3:"int";s:24:"RelatedRecordDescription";N;s:8:"Indirect";s:4:"bool";s:12:"ActionTypeID";s:7:"tinyint";}s:12:"fieldFormats";a:0:{}s:4:"name";N;s:10:"fieldAlign";a:6:{s:19:"TransactionRecordID";s:4:"left";s:13:"RelatedModule";s:4:"left";s:15:"RelatedRecordID";s:5:"right";s:24:"RelatedRecordDescription";s:4:"left";s:8:"Indirect";s:6:"center";s:12:"ActionTypeID";s:4:"left";}}');
   $content .= $Grid1->render('view.php', $qsArgs);


//View Screen Sections here
/**VIEWSCREENSECTIONS**/
?>
