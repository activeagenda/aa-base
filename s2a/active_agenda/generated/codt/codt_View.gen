<?php
/**
 * Template file for generated files (alt. a generated file)
 *
 * PHP version 5
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2009 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under another license, the
 * contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.5, or subsequent versions as allowed by the RPL, and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the RPL is provided strictly on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND LICENSOR HEREBY
 * DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT, OR
 * NON-INFRINGEMENT. See the RPL for specific language governing rights and
 * limitations under the RPL.
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2009 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.5
 * @version        SVN: $Revision: 1627 $
 * @last-modified  SVN: $Date: 2009-05-11 22:22:15 +0200 (Pn, 11 maj 2009) $
 */

    /**CUSTOM_CODE|init**/

    //list of objects containing the field information
    $fields = unserialize('a:6:{s:10:"CodeTypeID";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:46:"Record ID|A number used to track code records.";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:10:"CodeTypeID";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:4:"Name";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:31:"Name|The name of this code type";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:4:"Name";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:11:"Description";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:52:"Description|A clarifying descrition of the code type";s:8:"dataType";s:12:"varchar(255)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:11:"Description";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:12:"Dependencies";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:94:"Dependencies|A calculated field representing the number of module dependent upon the code type";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:12:"Dependencies";s:10:"needsReGet";b:1;s:11:"formatField";N;}s:5:"Items";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:87:"Items|A calculated field representing the number of items associated with the code type";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:5:"Items";s:10:"needsReGet";b:1;s:11:"formatField";N;}s:8:"_ModDate";O:14:"InvisibleField":15:{s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";N;s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";N;s:17:"inlinePostContent";N;s:4:"name";s:8:"_ModDate";}}');


    //list of grids
    /**grids**/

    //phrases for field names, in field order
    $phrases = array(
   'CodeTypeID' => gettext("Record ID|A number used to track code records."),
   'Name' => gettext("Name|The name of this code type"),
   'Description' => gettext("Description|A clarifying descrition of the code type"),
   'Dependencies' => gettext("Dependencies|A calculated field representing the number of module dependent upon the code type"),
   'Items' => gettext("Items|A calculated field representing the number of items associated with the code type"),
   '_ModDate' => gettext("Modified On")
   );


    $ownerField = '';


    /**disbleGlobalModules**/
    /**useBestPractices**/

    //retrieve record
    $data = array();

    /**SQL|GET_BEGIN**/
    $SQL = "SELECT 
   `codt`.CodeTypeID AS CodeTypeID,
   `codt`.Name AS Name,
   `codt`.Description AS Description,
   `codtd1`.Dependencies AS Dependencies,
   `cod1`.Items AS Items,
   DATE_FORMAT(`codt`._ModDate, GET_FORMAT(DATETIME,/*localDateTime*/'ISO')) AS _ModDate,
   NULLIF(CONCAT(IFNULL( CAST( `codt`.Name AS CHAR ),''),' | ',IFNULL( CAST( `codt`.CodeTypeID AS CHAR ),'')),' | ') AS RecordLabel
FROM `codt`
   LEFT OUTER JOIN (SELECT 
COUNT(`codtd`.DependencyID) AS Dependencies,
`codtd`.CodeTypeID
FROM `codtd` 
 WHERE `codtd`._Deleted = 0 

GROUP BY `codtd`.CodeTypeID 
) AS codtd1 
ON (
`codt`.CodeTypeID = codtd1.CodeTypeID
) 
   LEFT OUTER JOIN (SELECT 
COUNT(`cod`.CodeID) AS Items,
`cod`.CodeTypeID
FROM `cod` 
 WHERE `cod`._Deleted = 0 

GROUP BY `cod`.CodeTypeID 
) AS cod1 
ON (
`codt`.CodeTypeID = cod1.CodeTypeID
) 
WHERE codt._Deleted = 0
   AND `codt`.CodeTypeID = '/**RecordID**/'
";

    $SQL = TranslateLocalDateSQLFormats($SQL);

    /**CUSTOM_CODE|before_get**/

    //get data
    $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $SQL), DB_FETCHMODE_ASSOC);
    dbErrorCheck($r);

    /**SQL|GET_END**/
    switch (count($r)){
    case 0:
        trigger_error("This record does not exist, or could not be found.|Record not found.", E_USER_ERROR);
        break;
    case 1:
        break;
    default:
        trigger_error("More than one record was found.", E_USER_WARNING);
        break;
    }

    $data = array_merge($data, $r[0]); //assign first (only) row

    /**CUSTOM_CODE|get**/

    //check if user has permission to view or edit record - will redirect if no permission at all
    $allowEdit = $User->CheckViewScreenPermission();
    //$allowEdit = true;

    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    $tabsQS = MakeQS($tabsQSargs);

    //List tab
    $tabs['List'] = Array("list.php?$qs", gettext("List|View the list of Code Types"));

    if ($allowEdit){
              $tabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("a Code Type") );
      $tabs['Form'] = array( "edit.php?scr=Form&amp;$tabsQS", gettext("Form|Edit code types") );
      $tabs['Items'] = array( "edit.php?scr=Items&amp;$tabsQS", gettext("Items") );

    } else {
              $tabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("a Code Type") );

    }

    $recordLabelField = $data['RecordLabel'];

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $pageTitle = gettext("Code Type");
    $screenPhrase = gettext("View|View code types");

    $backlink = "list.php?$qs";

    $nextScreen = "Form";
    $editlink = "edit.php?$tabsQS&scr=$nextScreen";
    $content = renderViewTable($content, $allowEdit, $backlink, $editlink);

    //add byline info on record modification info
    $content .= "<div class=\"recinfo\">{$phrases['_ModDate']} {$data['_ModDate']}";
    if ($User->IsAdmin) {
        $content .= '&nbsp; &nbsp; <a href="audit.php?mdl='.$ModuleID.'&rid='.$recordID.'">'.gettext("Audit Trail").'</a> ';
    }
    $content .= "</div>";

    //display view grids here


//View Screen Sections here
$content .= '<h1>'. gettext("Associations") .'</h1>';
$fields = '';
$phrases = array();
$SQL = '';
   $grids = array();
   $grids[1] = unserialize('O:8:"ViewGrid":20:{s:13:"orderByFields";a:0:{}s:6:"isInfo";b:0;s:10:"isGuidance";b:0;s:10:"isVertical";b:0;s:15:"verticalFormats";a:0:{}s:8:"moduleID";s:5:"codtd";s:6:"phrase";s:22:"Code Type Dependencies";s:6:"number";i:1;s:6:"Fields";a:3:{s:20:"CodeTypeDependencyID";O:14:"InvisibleField":15:{s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:106:"Record ID|An automatically assigned number used to associate code type dependencies with dependent modules";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"codtd";s:9:"gridAlign";N;s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";N;s:17:"inlinePostContent";N;s:4:"name";s:20:"CodeTypeDependencyID";}s:12:"DependencyID";O:9:"ViewField":21:{s:9:"linkField";s:19:"DependentModuleLink";s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:61:"Module ID|The name of the module dependent upon the code type";s:8:"dataType";s:10:"varchar(5)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"codtd";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:12:"DependencyID";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:10:"Dependency";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:68:"Dependent Module|The name of the module dependent upon the code type";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"codtd";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:10:"Dependency";s:10:"needsReGet";b:0;s:11:"formatField";N;}}s:8:"countSQL";s:109:"SELECT 
    count(*) 
FROM `codtd`
   
WHERE codtd._Deleted = 0
   AND `codtd`.CodeTypeID = \'/**RecordID**/\'
";s:7:"listSQL";s:381:"SELECT 
   `codtd`.CodeTypeDependencyID AS CodeTypeDependencyID,
CONCAT(\'internal:view.php?mdl=\',\'mod\',\'&rid=\',`codtd`.DependencyID) AS DependentModuleLink,
`codtd`.DependencyID AS DependencyID,
`mod1`.Name AS Dependency
FROM `codtd`
LEFT OUTER JOIN `mod` AS mod1 
   ON (`codtd`.DependencyID = `mod1`.ModuleID )
WHERE codtd._Deleted = 0
AND `codtd`.CodeTypeID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:8:"localKey";s:10:"CodeTypeID";s:9:"parentKey";N;s:8:"PKFields";N;s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:3:{s:20:"CodeTypeDependencyID";s:3:"int";s:12:"DependencyID";s:10:"varchar(5)";s:10:"Dependency";N;}s:12:"fieldFormats";a:0:{}s:4:"name";N;s:10:"fieldAlign";a:3:{s:20:"CodeTypeDependencyID";s:5:"right";s:12:"DependencyID";s:4:"left";s:10:"Dependency";s:4:"left";}}');
   $grids[2] = unserialize('O:8:"ViewGrid":20:{s:13:"orderByFields";a:0:{}s:6:"isInfo";b:0;s:10:"isGuidance";b:0;s:10:"isVertical";b:0;s:15:"verticalFormats";a:0:{}s:8:"moduleID";s:3:"cod";s:6:"phrase";s:10:"Code Items";s:6:"number";i:2;s:6:"Fields";a:6:{s:8:"RecordID";O:14:"InvisibleField":15:{s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:66:"Record ID|A unique ID for internal database purposes (primary key)";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"cod";s:9:"gridAlign";N;s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";N;s:17:"inlinePostContent";N;s:4:"name";s:8:"RecordID";}s:6:"CodeID";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:7:"Code ID";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"cod";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:6:"CodeID";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:10:"CodeTypeID";O:14:"InvisibleField":15:{s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:48:"Code Type ID|A number used to track code records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"cod";s:9:"gridAlign";N;s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";N;s:17:"inlinePostContent";N;s:4:"name";s:10:"CodeTypeID";}s:11:"Description";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:11:"Description";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"cod";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:11:"Description";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:9:"SortOrder";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:10:"Sort Order";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"cod";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:9:"SortOrder";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:5:"Value";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:5:"Value";s:8:"dataType";s:11:"varchar(25)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"cod";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:5:"Value";s:10:"needsReGet";b:0;s:11:"formatField";N;}}s:8:"countSQL";s:103:"SELECT 
    count(*) 
FROM `cod`
   
WHERE cod._Deleted = 0
   AND `cod`.CodeTypeID = \'/**RecordID**/\'
";s:7:"listSQL";s:256:"SELECT 
   `cod`.RecordID AS RecordID,
`cod`.CodeID AS CodeID,
`cod`.CodeTypeID AS CodeTypeID,
`cod`.Description AS Description,
`cod`.SortOrder AS SortOrder,
`cod`.Value AS Value
FROM `cod`

WHERE cod._Deleted = 0
AND `cod`.CodeTypeID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:8:"localKey";s:10:"CodeTypeID";s:9:"parentKey";N;s:8:"PKFields";N;s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:6:{s:8:"RecordID";s:3:"int";s:6:"CodeID";s:3:"int";s:10:"CodeTypeID";s:3:"int";s:11:"Description";s:12:"varchar(128)";s:9:"SortOrder";s:3:"int";s:5:"Value";s:11:"varchar(25)";}s:12:"fieldFormats";a:0:{}s:4:"name";N;s:10:"fieldAlign";a:6:{s:8:"RecordID";s:5:"right";s:6:"CodeID";s:5:"right";s:10:"CodeTypeID";s:5:"right";s:11:"Description";s:4:"left";s:9:"SortOrder";s:5:"right";s:5:"Value";s:4:"left";}}');
$content .= renderViewScreenSection($fields, $phrases, $SQL, $grids);

?>
