<?php
/**
 * Template file for generated files (alt. a generated file)
 *
 * PHP version 4, 5
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2008 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under another license, the
 * contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.5, or subsequent versions as allowed by the RPL, and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the RPL is provided strictly on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND LICENSOR HEREBY
 * DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT, OR
 * NON-INFRINGEMENT. See the RPL for specific language governing rights and
 * limitations under the RPL.
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2008 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.5
 * @version        SVN: $Revision: 1372 $
 * @last-modified  SVN: $Date: 2008-12-19 13:49:45 -0800 (Fri, 19 Dec 2008) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:17:{s:8:"ModuleID";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:236:"Module ID|A unique character ID assigned to each module of the application. Character ID\'s consist of between three and five characters. Main module ID\'s typically contain three characters and sub-modules contain four to five characters";s:8:"dataType";s:10:"varchar(5)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:8:"ModuleID";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:4:"Name";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:34:"Module Name|The name of the module";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:4:"Name";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:10:"ModuleDesc";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:70:"Module Description|A detailed description of the purpose of the module";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:10:"ModuleDesc";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:23:"GlobalDiscussionAddress";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:96:"Global Discussion ID|The ID assigned to the global discussion forum most relevant to this module";s:8:"dataType";s:11:"varchar(50)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:23:"GlobalDiscussionAddress";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:22:"LocalDiscussionAddress";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:94:"Local Discussion ID|The ID assigned to the local discussion forum most relevant to this module";s:8:"dataType";s:11:"varchar(50)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:22:"LocalDiscussionAddress";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:10:"StandAlone";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:55:"Stand Alone|Whether this module is a stand alone module";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:10:"StandAlone";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:9:"SubModule";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:64:"Sub Module|Whether this module is a sub module of another module";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:9:"SubModule";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:11:"Association";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:115:"Association|Whether this module is an association module which is used to associate many modules of different types";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:11:"Association";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:6:"Global";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:94:"Global|Whether this module is a global module which is available from within all other modules";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:6:"Global";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:6:"Remote";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:97:"Remote|Whether this module is a remote module, i.e. pointed to by RemoteFields from other modules";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:6:"Remote";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:12:"ModuleStatus";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:86:"Module Status|A short description of the technical implementation status of the module";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:12:"ModuleStatus";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:18:"ModuleDependencies";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:106:"Module Dependencies|A calculated field representing the total number of modules dependent upon this module";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:18:"ModuleDependencies";s:10:"needsReGet";b:1;s:11:"formatField";N;}s:16:"CodeDependencies";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:104:"Code Dependencies|A calculated field representing the total number of codes the module is dependent upon";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:16:"CodeDependencies";s:10:"needsReGet";b:1;s:11:"formatField";N;}s:19:"ProcessDependencies";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:80:"Process Dependencies|Risk management process elements that depend on this module";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:19:"ProcessDependencies";s:10:"needsReGet";b:1;s:11:"formatField";N;}s:14:"ModuleListType";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:103:"Type List|Whether this module is used to populate \'type\' lists used by other modules to define a record";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:14:"ModuleListType";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:12:"GuidanceType";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:84:"Guidance Type|Whether this \'type\' module is used to enable the provision of guidance";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:12:"GuidanceType";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:7:"ImpPlan";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:127:"Implementation Planning|Whether this module should be included within the list of modules for implementation planning purposes.";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:7:"ImpPlan";s:10:"needsReGet";b:0;s:11:"formatField";N;}}');

$hasEditableFields = false;


$skipSaveFields = unserialize('a:17:{i:0;s:8:"ModuleID";i:1;s:4:"Name";i:2;s:10:"ModuleDesc";i:3;s:23:"GlobalDiscussionAddress";i:4;s:22:"LocalDiscussionAddress";i:5;s:10:"StandAlone";i:6;s:9:"SubModule";i:7;s:11:"Association";i:8;s:6:"Global";i:9;s:6:"Remote";i:10;s:12:"ModuleStatus";i:11;s:18:"ModuleDependencies";i:12;s:16:"CodeDependencies";i:13;s:19:"ProcessDependencies";i:14;s:14:"ModuleListType";i:15;s:12:"GuidanceType";i:16;s:7:"ImpPlan";}');


$singularRecordName = gettext("Module");

//field value array
$data = array(
'ModuleID' => '',
         'Name' => '',
         'ModuleDesc' => '',
         'GlobalDiscussionAddress' => '',
         'LocalDiscussionAddress' => '',
         'StandAlone' => '',
         'SubModule' => '',
         'Association' => '',
         'Global' => '',
         'Remote' => '',
         'ModuleStatus' => '',
         'ModuleDependencies' => '',
         'CodeDependencies' => '',
         'ProcessDependencies' => '',
         'ModuleListType' => '',
         'GuidanceType' => '',
         'ImpPlan' => ''
);

if(empty($_POST)){
    //pre-populate fields with URL values
    if(0 === $recordID){
        foreach($data as $fieldName=>$value){
            if(isset($_GET[$fieldName])){
                $data[$fieldName] = $_GET[$fieldName];
            }
        }
    }
} else {
    foreach($data as $fieldName=>$value){
        if(isset($_POST[$fieldName])){
            $data[$fieldName] = $_POST[$fieldName];
        }
    }
}

//list of grids
   $grids = array();
   $grids[1] = unserialize('O:8:"EditGrid":32:{s:10:"getFormSQL";s:786:"SELECT 
   `moddr`.ModuleDirectionID AS ModuleDirectionID,
   `org2`.Name AS Organization,
   `moddr`.OrganizationID AS OrganizationID,
   `moddr`.DirectionTitle AS DirectionTitle,
   `moddr`.Direction AS Direction,
   `moddr`.SortOrder AS SortOrder,
   `moddr`.Active AS Active,
   DATE_FORMAT(`moddr`._ModDate, GET_FORMAT(DATETIME,/*localDateTime*/\'ISO\')) AS ModifiedDate,
   `ppl1`.DisplayName AS ModifiedBy
FROM `moddr`
   LEFT OUTER JOIN `org` AS org2 
   ON (`moddr`.OrganizationID = `org2`.OrganizationID )
   LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`moddr`._ModBy = `ppl1`.PersonID )
 INNER JOIN `mod` AS `parent` ON (
`moddr`.RelatedModuleID = `parent`.ModuleID)

WHERE moddr._Deleted = 0
   AND `moddr`.ModuleDirectionID = \'/**RowID**/\'
AND `parent`.RecordID = \'/**RecordID**/\'
";s:9:"getRowSQL";s:514:"SELECT 
   `moddr`.ModuleDirectionID AS ModuleDirectionID,
   `moddr`.SortOrder AS SortOrder,
   `org2`.Name AS Organization,
   `moddr`.DirectionTitle AS DirectionTitle,
   `moddr`.OrganizationID AS OrganizationID
FROM `moddr`
   LEFT OUTER JOIN `org` AS org2 
   ON (`moddr`.OrganizationID = `org2`.OrganizationID )
 INNER JOIN `mod` AS `parent` ON (
`moddr`.RelatedModuleID = `parent`.ModuleID)

WHERE moddr._Deleted = 0
   AND `moddr`.ModuleDirectionID = \'/**RowID**/\'
AND `parent`.RecordID = \'/**RecordID**/\'
";s:12:"remoteFields";N;s:11:"hasGridForm";b:1;s:10:"FormFields";a:8:{s:17:"ModuleDirectionID";O:14:"InvisibleField":15:{s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:135:"Record ID|An automatically assigned number used to track module specific directions provided to users based on the default organization";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"moddr";s:9:"gridAlign";N;s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";N;s:17:"inlinePostContent";N;s:4:"name";s:17:"ModuleDirectionID";}s:14:"OrganizationID";O:13:"OrgComboField":31:{s:9:"listField";s:12:"Organization";s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:327:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name,
CASE WHEN Internal = 1 AND Participant = 1 THEN 0
WHEN Internal = 0 AND Participant = 1 THEN 1
ELSE 2 END AS orgListOption FROM `org`
WHERE org._Deleted = 0
 AND ((Internal = 1 AND Participant = 1)
OR (Internal = 0 AND Participant = 1))
 ORDER BY orgListOption, Name, ID;";s:6:"getSQL";s:234:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name,
CASE WHEN Internal = 1 AND Participant = 1 THEN 0
WHEN Internal = 0 AND Participant = 1 THEN 1
ELSE 2 END AS orgListOption FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:8:"validate";s:16:"RequireSelection";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"moddr";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;s:13:"orderByFields";a:0:{}s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:65:"Organization|The name of the organization providing the direction";s:8:"dataType";s:3:"int";s:7:"invalid";N;s:8:"formName";s:5:"moddr";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:14:"OrganizationID";}s:14:"DirectionTitle";O:9:"EditField":18:{s:4:"size";s:2:"75";s:9:"maxLength";s:3:"128";s:5:"align";s:4:"left";s:8:"validate";s:8:"notEmpty";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:68:"Title|A short but descriptive title for the direction being provided";s:8:"dataType";s:12:"varchar(128)";s:7:"invalid";N;s:8:"formName";s:5:"moddr";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:14:"DirectionTitle";}s:9:"Direction";O:9:"MemoField":19:{s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:8:"validate";s:0:"";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:211:"Direction|Detailed directions regarding the use of a module at a specific location. Directions can include data entry, internal policy, or other direction issued throughout an organization to standardize results";s:8:"dataType";s:4:"text";s:7:"invalid";N;s:8:"formName";s:5:"moddr";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:9:"Direction";s:14:"conditionField";N;s:14:"conditionValue";N;}s:9:"SortOrder";O:9:"EditField":18:{s:4:"size";s:1:"5";s:9:"maxLength";s:1:"5";s:5:"align";s:4:"left";s:8:"validate";s:0:"";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:101:"Sort Order|A numerical value used to define the order within which the provided direction will appear";s:8:"dataType";s:3:"int";s:7:"invalid";N;s:8:"formName";s:5:"moddr";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:9:"SortOrder";}s:6:"Active";O:13:"CheckBoxField":19:{s:11:"ShortPhrase";N;s:8:"validate";s:0:"";s:8:"dataType";s:4:"bool";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:84:"Active|Whether the direction is current and active or should no longer be considered";s:7:"invalid";N;s:8:"formName";s:5:"moddr";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:6:"Active";s:14:"conditionField";N;s:14:"conditionValue";N;s:8:"moduleID";s:5:"moddr";}s:12:"ModifiedDate";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:73:"Last Modified|Automatic entry of the last date the direction was modified";s:8:"dataType";s:8:"datetime";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"moddr";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:12:"ModifiedDate";s:10:"needsReGet";b:1;s:11:"formatField";N;}s:10:"ModifiedBy";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:68:"Modified By|Automatic entry of the last user to modify the direction";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"moddr";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:10:"ModifiedBy";s:10:"needsReGet";b:0;s:11:"formatField";N;}}s:10:"selectedID";N;s:7:"encType";s:0:"";s:16:"IDTranslationSQL";s:0:"";s:20:"listExtendedConditon";s:0:"";s:7:"PKField";s:17:"ModuleDirectionID";s:19:"showGlobalSMRecords";b:0;s:13:"orderByFields";a:1:{s:9:"SortOrder";b:0;}s:18:"dataCollectionForm";b:0;s:15:"parentGetFields";a:0:{}s:20:"parentSelectSQLOnNew";N;s:15:"getFormSQLOnNew";N;s:17:"getRowSQLOnDelete";N;s:14:"allowAddRecord";b:1;s:8:"moduleID";s:5:"moddr";s:6:"phrase";s:16:"Module Direction";s:6:"number";i:1;s:6:"Fields";a:4:{s:17:"ModuleDirectionID";O:14:"InvisibleField":15:{s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:135:"Record ID|An automatically assigned number used to track module specific directions provided to users based on the default organization";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"moddr";s:9:"gridAlign";N;s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";N;s:17:"inlinePostContent";N;s:4:"name";s:17:"ModuleDirectionID";}s:9:"SortOrder";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:101:"Sort Order|A numerical value used to define the order within which the provided direction will appear";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"moddr";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:9:"SortOrder";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:12:"Organization";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:65:"Organization|The name of the organization providing the direction";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"moddr";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:12:"Organization";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:14:"DirectionTitle";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:68:"Title|A short but descriptive title for the direction being provided";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"moddr";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:14:"DirectionTitle";s:10:"needsReGet";b:0;s:11:"formatField";N;}}s:8:"countSQL";s:189:"SELECT 
    count(*) 
FROM `moddr`
   
 INNER JOIN `mod` AS `parent` ON (
`moddr`.RelatedModuleID = `parent`.ModuleID)

WHERE moddr._Deleted = 0
   AND `parent`.RecordID = \'/**RecordID**/\'
";s:7:"listSQL";s:451:"SELECT 
   `moddr`.ModuleDirectionID AS ModuleDirectionID,
`moddr`.OrganizationID AS OrganizationID,
`moddr`.SortOrder AS SortOrder,
`org2`.Name AS Organization,
`moddr`.DirectionTitle AS DirectionTitle
FROM `moddr`
LEFT OUTER JOIN `org` AS org2 
   ON (`moddr`.OrganizationID = `org2`.OrganizationID )
 INNER JOIN `mod` AS `parent` ON (
`moddr`.RelatedModuleID = `parent`.ModuleID)

WHERE moddr._Deleted = 0
AND `parent`.RecordID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:8:"localKey";s:15:"RelatedModuleID";s:9:"parentKey";s:8:"ModuleID";s:8:"PKFields";a:1:{i:0;s:17:"ModuleDirectionID";}s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:4:{s:17:"ModuleDirectionID";s:3:"int";s:9:"SortOrder";s:3:"int";s:12:"Organization";N;s:14:"DirectionTitle";s:12:"varchar(128)";}s:4:"name";N;s:10:"fieldAlign";a:4:{s:17:"ModuleDirectionID";s:5:"right";s:9:"SortOrder";s:5:"right";s:12:"Organization";s:4:"left";s:14:"DirectionTitle";s:4:"left";}}');


/**guidanceGrid**/

$PKField = 'RecordID';

$ownerField = '';


/**disbleGlobalModules**/

//handle any posted grid form
   $grids[1]->handleForm();


$tabsQSargs = $qsArgs;
unset($tabsQSargs['scr']);
unset($tabsQSargs['gid']);
unset($tabsQSargs['grw']);
$tabsQS = MakeQS($tabsQSargs);
$nextScreen = "GapAnalysis";
$nextlink = "edit.php?$tabsQS&scr=$nextScreen";
$form_enctype = '';

/**CUSTOM_CODE|init**/

$getSQL = "SELECT 
   `mod`.ModuleID AS ModuleID,
   `mod`.Name AS Name,
   `mod`.ModuleDesc AS ModuleDesc,
   `mod`.GlobalDiscussionAddress AS GlobalDiscussionAddress,
   `mod`.LocalDiscussionAddress AS LocalDiscussionAddress,
   `mod`.StandAlone AS StandAlone,
   `mod`.SubModule AS SubModule,
   `mod`.Association AS Association,
   `mod`.Global AS Global,
   `mod`.Remote AS Remote,
   `cod1`.Description AS ModuleStatus,
   `modd1`.ModuleDependencies AS ModuleDependencies,
   `codtd1`.CodeDependencies AS CodeDependencies,
   `modpa1`.ProcessDependencies AS ProcessDependencies,
   `mod`.ModuleListType AS ModuleListType,
   `mod`.GuidanceType AS GuidanceType,
   `mod`.ImpPlan AS ImpPlan,
   NULLIF(CONCAT(IFNULL(`mod`.Name,''),' | ',IFNULL(`cod1`.Description,''),' Last parsed: ',IFNULL(DATE_FORMAT(`mod`.LastParsed, GET_FORMAT(DATETIME,/*localDateTime*/'ISO')),'')),' |  Last parsed: ') AS RecordLabel
FROM `mod`
   LEFT OUTER JOIN `cod` AS cod1 
   ON (`mod`.ModuleStatusID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '272')
   LEFT OUTER JOIN (SELECT 
COUNT(`modd`.DependencyID) AS ModuleDependencies,
`modd`.ModuleID
FROM `modd` 
 WHERE `modd`._Deleted = 0 

GROUP BY `modd`.ModuleID 
) AS modd1 
ON (
`mod`.ModuleID = modd1.ModuleID
) 
   LEFT OUTER JOIN (SELECT 
COUNT(`codtd`.CodeTypeID) AS CodeDependencies,
`codtd`.DependencyID
FROM `codtd` 
 WHERE `codtd`._Deleted = 0 

GROUP BY `codtd`.DependencyID 
) AS codtd1 
ON (
`mod`.ModuleID = codtd1.DependencyID
) 
   LEFT OUTER JOIN (SELECT 
GROUP_CONCAT(`cod1`.Description ORDER BY `cod1`.Description SEPARATOR ', ') AS ProcessDependencies,
`modpa`.ModuleID
FROM `modpa` 
LEFT OUTER JOIN `cod` AS cod1 
   ON (`modpa`.ProcessElementID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '315')
 WHERE `modpa`._Deleted = 0 

GROUP BY `modpa`.ModuleID 
) AS modpa1 
ON (
`mod`.ModuleID = modpa1.ModuleID
) 
WHERE mod._Deleted = 0
   AND `mod`.RecordID = '/**RecordID**/'
";

$getSQL = TranslateLocalDateSQLFormats($getSQL);

if(!empty($_POST['CloneForm'])){
    $recordID = 0;
}


$screenPhrase = gettext("Direction|Associate organizational direction with the module");

/*populates screen messages differently depending on whether the record exists in db or not*/
if($recordID != 0) {
    $existing = true;

    $pageTitle = gettext("Module");

    /**CUSTOM_CODE|before_get**/

    //retrieve record
    /**SQL|GET_BEGIN**/
    $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
    dbErrorCheck($r);
    /**SQL|GET_END**/

    if(count($r) > 0) {

        //populate data array, combining POSTed data with DB record:
        //POST data takes precedence
        foreach($r[0] as $fieldName=>$dbValue){
            //(checking for gridnum avoids interference with any posted edit grid)
            if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                $data[$fieldName] = $_POST[$fieldName];
            } else {
                $data[$fieldName] = $dbValue;
            }
        }

    } else {

        $messages[] = array('e', gettext("Error: Empty query result."));

    }

    /**CUSTOM_CODE|get**/
} else {
    //inserting a record
    $existing = false;
    $pageTitle = gettext("Modules");
    /**CUSTOM_CODE|new**/
}

//check if user has permission to edit record
$allowEdit = $User->CheckEditScreenPermission();
//if not, it terminates and display error msg.

//phrases for field names, in field order
$phrases = array(
   'ModuleID' => gettext("Module ID|A unique character ID assigned to each module of the application. Character ID's consist of between three and five characters. Main module ID's typically contain three characters and sub-modules contain four to five characters"),
   'Name' => gettext("Module Name|The name of the module"),
   'ModuleDesc' => gettext("Module Description|A detailed description of the purpose of the module"),
   'GlobalDiscussionAddress' => gettext("Global Discussion ID|The ID assigned to the global discussion forum most relevant to this module"),
   'LocalDiscussionAddress' => gettext("Local Discussion ID|The ID assigned to the local discussion forum most relevant to this module"),
   'StandAlone' => gettext("Stand Alone|Whether this module is a stand alone module"),
   'SubModule' => gettext("Sub Module|Whether this module is a sub module of another module"),
   'Association' => gettext("Association|Whether this module is an association module which is used to associate many modules of different types"),
   'Global' => gettext("Global|Whether this module is a global module which is available from within all other modules"),
   'Remote' => gettext("Remote|Whether this module is a remote module, i.e. pointed to by RemoteFields from other modules"),
   'ModuleStatus' => gettext("Module Status|A short description of the technical implementation status of the module"),
   'ModuleDependencies' => gettext("Module Dependencies|A calculated field representing the total number of modules dependent upon this module"),
   'CodeDependencies' => gettext("Code Dependencies|A calculated field representing the total number of codes the module is dependent upon"),
   'ProcessDependencies' => gettext("Process Dependencies|Risk management process elements that depend on this module"),
   'ModuleListType' => gettext("Type List|Whether this module is used to populate 'type' lists used by other modules to define a record"),
   'GuidanceType' => gettext("Guidance Type|Whether this 'type' module is used to enable the provision of guidance"),
   'ImpPlan' => gettext("Implementation Planning|Whether this module should be included within the list of modules for implementation planning purposes.")
   );


//if the form was posted by clicking the Save button
if(!empty($_POST['Save'])){
    /**-remove_begin-**/

    /**CUSTOM_CODE|save**/

    //validate submitted data:
    $vMsgs = "";
    

    if(0 != strlen($vMsgs)){
        //prepend a general error message
        $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
        $vMsgs = nl2br($vMsgs);

        //return error messages
        $messages[] = array('e', $vMsgs);

    } else {

        /**CUSTOM_CODE|check_deleted_row_exists**/

        $dh = GetDataHandler($ModuleID);
        $recordID = $dh->saveRow($data, $recordID, $skipSaveFields);

        //recreate $nextlink b/c of new record ID when inserting
        $inserted = false;
        if(!$existing){
            $qsArgs['rid'] = $recordID; //pass both to tabs and other links
            $tabsQSargs = $qsArgs;
            unset($tabsQSargs['scr']);
            //$tabsQSargs['rid'] = $recordID;
            $tabsQS = MakeQS($tabsQSargs);
            $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
            if(empty($_POST['KeepNew'])){
                $existing = true;
            } else {
                $recordID = 0;
            }
            $inserted = true;
        }
    }

    /**CUSTOM_CODE|save_end**/
    /**-remove_end-**/

    if(empty($_POST['KeepNew'])){
        /**RE-GET_BEGIN**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**RE-GET_END**/
    } else {
        foreach($data as $fieldName => $fieldValue){
            $data[$fieldName] = '';
        }
    }

    //note: assumes all messages up til this point were errors
    if (count($messages) == 0){
        //add success message
        if ($inserted){
            $messages[] = array('m', gettext("The record was added successfully."));
        } else {
            $messages[] = array('m', gettext("The record was updated successfully."));
        }
    }
}
/**SQL|DELETE_BEGIN**/
if(!empty($_POST['Delete'])){

    $dh = GetDataHandler($ModuleID);
    $result = $dh->deleteRow($recordID);

    $deletelink = "list.php?$tabsQS";

    //redirect to list screen
    header("Location:" . $deletelink);
    exit;
}
/**SQL|DELETE_END**/

/**CUSTOM_CODE|after_save**/


if(!empty($_POST['KeepNew'])){
    unset($qsArgs['rid']); //ensures next submit will cause a new record
}

$qs = MakeQS($qsArgs);

//List tab
$tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Modules"));

//target for FORMs
$targetlink = "edit.php?$qs";

$cloneAsNew = false;
$keepAddNew = false;

//formatting that depends on whether the record exists or not
if($existing){
    //delete button only appears on the first EditScreen.
    $deletelink = '';
    $cancellink = "view.php?$tabsQS";

    /**clone_as_new**/

          $tabs['View'] = array( "view.php?scr=View&amp;$tabsQS", gettext("View|View summary information about").' '.gettext("a Module") );
      $tabs['Form'] = array( "edit.php?scr=Form&amp;$tabsQS", gettext("Form|The screen used to edit summary information about modules") );
      $tabs['Issues'] = array( "edit.php?scr=Issues&amp;$tabsQS", gettext("Issues|Associate issue reports with the module") );
      $tabs['Direction'] = array( "", gettext("Direction|Associate organizational direction with the module") );
      $tabs['GapAnalysis'] = array( "edit.php?scr=GapAnalysis&amp;$tabsQS", gettext("Gap Analysis|Associate gap analysis criteria with the module") );
      $tabs['Process'] = array( "edit.php?scr=Process&amp;$tabsQS", gettext("Process Elements|Associate risk management process elements with the module") );
      $tabs['RecordReports'] = array( "reports.php?scr=RecordReports&amp;$tabsQS", gettext("Reports|View reports available for the module") );


} else {
    $deletelink = '';
    $cancellink = "list.php?$tabsQS";

    /**keep_add_new**/

          $tabs['Direction'] = array( "", gettext("New Module") );

}

/**CUSTOM_CODE|form**/

$content = '';
foreach($fields as $key => $field){
    if (!$field->isSubField()){
        $content .= $field->render($data, $phrases);
    }
}

$formProps = array(
    /**is_main_form**/
    'delete_button'      => strlen($deletelink) > 0,
    'cancel_link'        => $cancellink,
    'next_screen'        => $nextScreen,
    'form_enctype'       => $form_enctype,
    'module_id'          => $ModuleID,
    'render_buttons'     => $hasEditableFields,
    'clone'              => $cloneAsNew,
    'keep_add_new'       => $keepAddNew,
    'single_record_name' => $singularRecordName
);

$content = renderForm2($content, $targetlink, $formProps);

//insert code to enable calendar controls
/**dateFields**/

/**CUSTOM_CODE|after_form**/

//display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


/**CUSTOM_CODE|after_grids**/

   $recordLabelField = '';
    if(isset($data['RecordLabel'])) {
    $recordLabelField = $data['RecordLabel'];
    }
?>