<?php
/**
 * Template file for generated files (alt. a generated file)
 *
 * PHP version 5
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2009 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under another license, the
 * contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.5, or subsequent versions as allowed by the RPL, and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the RPL is provided strictly on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND LICENSOR HEREBY
 * DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT, OR
 * NON-INFRINGEMENT. See the RPL for specific language governing rights and
 * limitations under the RPL.
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2009 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.5
 * @version        SVN: $Revision: 1627 $
 * @last-modified  SVN: $Date: 2009-05-11 22:22:15 +0200 (Pn, 11 maj 2009) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:3:{s:11:"UserGroupID";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:45:"Group ID|An ID value for primary key purpose.";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:11:"UserGroupID";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:4:"Name";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:22:"Name|The group\'s name.";s:8:"dataType";s:11:"varchar(25)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:4:"Name";s:10:"needsReGet";b:0;s:11:"formatField";N;}s:11:"Description";O:9:"ViewField":21:{s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:54:"Description|A description of the purpose of the group.";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:12:"defaultValue";N;s:9:"isDefault";N;s:10:"renderMode";N;s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:11:"Description";s:10:"needsReGet";b:0;s:11:"formatField";N;}}');

$hasEditableFields = false;


$skipSaveFields = unserialize('a:3:{i:0;s:11:"UserGroupID";i:1;s:4:"Name";i:2;s:11:"Description";}');


$singularRecordName = gettext("User Group");

//field value array
$data = array(
'UserGroupID' => '',
         'Name' => '',
         'Description' => ''
);

if(empty($_POST)){
    //pre-populate fields with URL values
    if(0 === $recordID){
        foreach($data as $fieldName=>$value){
            if(isset($_GET[$fieldName])){
                $data[$fieldName] = $_GET[$fieldName];
            }
        }
    }
} else {
    foreach($data as $fieldName=>$value){
        if(isset($_POST[$fieldName])){
            $data[$fieldName] = $_POST[$fieldName];
        }
    }
}

//list of grids
   $grids = array();
   $grids[1] = unserialize('O:16:"SearchSelectGrid":54:{s:12:"searchFields";a:1:{s:14:"OrganizationID";O:13:"OrgComboField":31:{s:9:"listField";s:12:"Organization";s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:8:"validate";s:0:"";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;s:13:"orderByFields";a:0:{}s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:64:"Organization|Name of organization associated with the individual";s:8:"dataType";N;s:7:"invalid";N;s:8:"formName";s:10:"searchForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:10:"renderMode";s:6:"search";s:16:"inlinePreContent";s:0:"";s:17:"inlinePostContent";s:0:"";s:4:"name";s:14:"OrganizationID";}}s:18:"searchFieldPhrases";a:1:{s:14:"OrganizationID";s:64:"Organization|Name of organization associated with the individual";}s:16:"availableIDField";s:8:"PersonID";s:18:"availableNameField";s:11:"DisplayName";s:16:"listAvailableSQL";N;s:14:"listConditions";a:0:{}s:15:"listSelectedSQL";s:225:"SELECT `usrgm`.PersonID AS ID, `ppl1`.DisplayName AS Name  FROM usrgm  LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`usrgm`.PersonID = `ppl1`.PersonID )
 WHERE  usrgm.UserGroupID = \'/*recordID*/\' AND usrgm._Deleted = 0 ORDER BY Name";s:23:"listExistingSelectedSQL";s:204:"SELECT `usrgm`.PersonID AS ID, `ppl1`.DisplayName AS Name , usrgm._Deleted FROM usrgm  LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`usrgm`.PersonID = `ppl1`.PersonID )
 WHERE  usrgm.UserGroupID = \'/*recordID*/\'";s:9:"insertSQL";s:116:"INSERT INTO usrgm (PersonID, UserGroupID, _ModBy, _ModDate) VALUES (\'/*value*/\', \'/*recordID*/\', /*userID*/, NOW());";s:15:"insertRemoteSQL";N;s:9:"removeSQL";s:192:"UPDATE usrgm SET 
            _Deleted = 1,
            _ModBy = \'/*userID*/\', 
            _ModDate = NOW()
        WHERE MembershipID = \'/*rowID*/\' AND usrgm.UserGroupID = \'/*recordID*/\'";s:15:"removeRemoteSQL";N;s:10:"restoreSQL";s:192:"UPDATE usrgm SET 
            _Deleted = 0,
            _ModBy = \'/*userID*/\', 
            _ModDate = NOW()
        WHERE MembershipID = \'/*rowID*/\' AND usrgm.UserGroupID = \'/*recordID*/\'";s:16:"restoreRemoteSQL";N;s:14:"getRemoteIDSQL";s:107:"SELECT MembershipID AS RowID FROM usrgm WHERE PersonID = \'/*value*/\' AND usrgm.UserGroupID = \'/*recordID*/\'";s:17:"getRemoteRowIDSQL";N;s:6:"logSQL";s:143:"INSERT INTO usrgm_l (PersonID, UserGroupID, _ModBy, _ModDate, _Deleted) VALUES (\'/*value*/\', \'/*recordID*/\', \'/*userID*/\', NOW(), /*deleted*/);";s:12:"logRemoteSQL";N;s:14:"useRemoteField";b:0;s:11:"listKeyType";s:0:"";s:10:"getFormSQL";s:0:"";s:9:"getRowSQL";s:0:"";s:12:"remoteFields";N;s:11:"hasGridForm";b:0;s:10:"FormFields";a:0:{}s:10:"selectedID";N;s:7:"encType";s:0:"";s:16:"IDTranslationSQL";s:0:"";s:20:"listExtendedConditon";s:0:"";s:7:"PKField";N;s:19:"showGlobalSMRecords";b:0;s:13:"orderByFields";a:0:{}s:18:"dataCollectionForm";b:0;s:15:"parentGetFields";a:0:{}s:20:"parentSelectSQLOnNew";N;s:15:"getFormSQLOnNew";N;s:17:"getRowSQLOnDelete";N;s:14:"allowAddRecord";b:1;s:8:"moduleID";s:5:"usrgm";s:6:"phrase";s:18:"User Group Members";s:6:"number";i:1;s:6:"Fields";a:0:{}s:8:"countSQL";N;s:7:"listSQL";N;s:12:"listExtended";b:0;s:8:"localKey";s:11:"UserGroupID";s:9:"parentKey";N;s:8:"PKFields";N;s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:0:{}s:12:"fieldFormats";a:0:{}s:4:"name";N;s:16:"primaryListField";s:6:"Person";s:12:"listModuleID";s:3:"ppl";}');


/**guidanceGrid**/

$PKField = 'UserGroupID';

$ownerField = '';


/**disbleGlobalModules**/

//handle any posted grid form
   $grids[1]->handleForm();


$tabsQSargs = $qsArgs;
unset($tabsQSargs['scr']);
unset($tabsQSargs['gid']);
unset($tabsQSargs['grw']);
$tabsQS = MakeQS($tabsQSargs);
$nextScreen = "";
$nextlink = "edit.php?$tabsQS&scr=$nextScreen";
$form_enctype = '';

/**CUSTOM_CODE|init**/

$getSQL = "SELECT 
   `usrg`.UserGroupID AS UserGroupID,
   `usrg`.Name AS Name,
   `usrg`.Description AS Description,
   NULLIF(CONCAT(IFNULL( CAST( `usrg`.Name AS CHAR ),'')),'') AS RecordLabel
FROM `usrg`
   
WHERE usrg._Deleted = 0
   AND `usrg`.UserGroupID = '/**RecordID**/'
";

$getSQL = TranslateLocalDateSQLFormats($getSQL);

if(!empty($_POST['CloneForm'])){
    $recordID = 0;
}


$screenPhrase = gettext("Members|Define which users that should be members of this group");

/*populates screen messages differently depending on whether the record exists in db or not*/
if($recordID != 0) {
    $existing = true;

    $pageTitle = gettext("User Group");

    /**CUSTOM_CODE|before_get**/

    //retrieve record
    /**SQL|GET_BEGIN**/
    $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
    dbErrorCheck($r);
    /**SQL|GET_END**/

    switch (count($r)){
    case 0:
        trigger_error(gettext("This record does not exist, or could not be found.|Record not found."), E_USER_ERROR);
        break;
    case 1:
        break;
    default:
        trigger_error(gettext("More than one record was found."), E_USER_WARNING);
        break;
    }

    //populate data array, combining POSTed data with DB record:
    //POST data takes precedence
    foreach($r[0] as $fieldName=>$dbValue){
        //(checking for gridnum avoids interference with any posted edit grid)
        if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
            $data[$fieldName] = $_POST[$fieldName];
        } else {
            $data[$fieldName] = $dbValue;
        }
    }


    /**CUSTOM_CODE|get**/
} else {
    //inserting a record
    $existing = false;
    $pageTitle = gettext("User Groups");
    /**CUSTOM_CODE|new**/
}

//check if user has permission to edit record
$allowEdit = $User->CheckEditScreenPermission();
//if not, it terminates and display error msg.

//phrases for field names, in field order
$phrases = array(
   'UserGroupID' => gettext("Group ID|An ID value for primary key purpose."),
   'Name' => gettext("Name|The group's name."),
   'Description' => gettext("Description|A description of the purpose of the group.")
   );


//if the form was posted by clicking the Save button
if(!empty($_POST['Save'])){
    

    if(empty($_POST['KeepNew'])){
        if(count($messages) == 0){
            /**-remove_begin-**/
            //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
            $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
            dbErrorCheck($r);
            if(count($r) > 0) {
                foreach($r[0] as $fieldName=>$dbValue){
                    //(checking for gridnum avoids interference with any posted edit grid)
                    if(empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                        $data[$fieldName] = $_POST[$fieldName];
                    } else {
                        $data[$fieldName] = $dbValue;
                    }
                }
            } else {
                $messages[] = array('e', gettext("Error: Empty query result."));
            }
            /**-remove_end-**/
        }
    } else {
        foreach($data as $fieldName => $fieldValue){
            $data[$fieldName] = '';
        }
    }

    //note: assumes all messages up til this point were errors
    if (count($messages) == 0){
        //add success message
        if ($inserted){
            $messages[] = array('m', gettext("The record was added successfully."));
        } else {
            $messages[] = array('m', gettext("The record was updated successfully."));
        }
    }
}
/**SQL|DELETE_BEGIN**/
if(!empty($_POST['Delete'])){

    $dh = GetDataHandler($ModuleID);
    $result = $dh->deleteRow($recordID);

    $deletelink = "list.php?$tabsQS";

    //redirect to list screen
    header("Location:" . $deletelink);
    exit;
}
/**SQL|DELETE_END**/

/**CUSTOM_CODE|after_save**/


if(!empty($_POST['KeepNew'])){
    unset($qsArgs['rid']); //ensures next submit will cause a new record
}

$qs = MakeQS($qsArgs);

//List tab
$tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of User Groups"));

//target for FORMs
$targetlink = "edit.php?$qs";

$cloneAsNew = false;
$keepAddNew = false;

//formatting that depends on whether the record exists or not
if($existing){
    //delete button only appears on the first EditScreen.
    $deletelink = '';
    $cancellink = "view.php?$tabsQS";

    $cloneAsNew = true;

          $tabs['View'] = array( "view.php?scr=View&amp;$tabsQS", gettext("View|View summary information about").' '.gettext("a User Group") );
      $tabs['Form'] = array( "edit.php?scr=Form&amp;$tabsQS", gettext("Form|Edit a user group") );
      $tabs['Permissions'] = array( "edit.php?scr=Permissions&amp;$tabsQS", gettext("Permissions|Edit permissions to view or edit records of a module") );
      $tabs['Members'] = array( "", gettext("Members|Define which users that should be members of this group") );


} else {
    $deletelink = '';
    $cancellink = "list.php?$tabsQS";

    $keepAddNew = true;

          $tabs['Members'] = array( "", gettext("New User Group") );

}

/**CUSTOM_CODE|form**/

$content = '';
foreach($fields as $key => $field){
    if (!$field->isSubField()){
        $content .= $field->render($data, $phrases);
    }
}

$formProps = array(
    /**is_main_form**/
    'delete_button'      => strlen($deletelink) > 0,
    'cancel_link'        => $cancellink,
    'next_screen'        => $nextScreen,
    'form_enctype'       => $form_enctype,
    'module_id'          => $ModuleID,
    'render_buttons'     => $hasEditableFields,
    'clone'              => $cloneAsNew,
    'keep_add_new'       => $keepAddNew,
    'single_record_name' => $singularRecordName
);

$content = renderForm2($content, $targetlink, $formProps);

//insert code to enable calendar controls
/**dateFields**/

/**CUSTOM_CODE|after_form**/

//display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


/**CUSTOM_CODE|after_grids**/

   $recordLabelField = '';
    if(isset($data['RecordLabel'])) {
    $recordLabelField = $data['RecordLabel'];
    }
?>